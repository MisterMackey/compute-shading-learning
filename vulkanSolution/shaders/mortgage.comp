#version 450

struct Record {
	double index;
	float interest_rate;
	float remaining_notional;
	float monthly_payment;
	float repayment_payment;
	float interest_payment;
	float write_off;
	int reset_frequency;
	int risk_indicator;
	int curr_date_offset;
	int next_reset_date_offset;
	int max_date_offset;
	int payment_type;
};

layout(local_size_x = 1024, local_size_y = 1, local_size_z = 1) in;

layout(std430, binding = 0) buffer Records {
	Record records[];
};

int updateRiskIndicator(int riskIndicator, float rand) {
	switch (riskIndicator) {
		case 0:
			if (rand < 0.0) {
				return 0;
			} else if (rand > 1-0.001f) {
				return 1;
			}
			break;
		case 1:
			if (rand < 0.1f) {
				return 0;
			} else if (rand > 1-0.01f) {
				return 2;
			}
			break;
		case 2:
			if (rand < 0.05f) {
				return 1;
			} else if (rand > 1-0.01f) {
				return 3;
			}
			break;
		case 3:
			if (rand < 0.05f) {
				return 2;
			} else if (rand > 1-0.05f) {
				return 4;
			}
			break;
		case 4:
			if (rand < 0.2f) {
				return 3;
			} else if (rand > 1-0.1f) {
				return 5;
			}
			break;
		default:
			break;
	}
	return riskIndicator;
}

float getDurationSpread(int currDateOffset, int maxDateOffset) {
	int years_left = int(ceil((maxDateOffset - currDateOffset) / 12.0f));
	if (years_left < 0) {
		return 0.0f;
	} else if (years_left < 5) {
		return 0.1f;
	} else if (years_left < 7) {
		return 0.4f;
	} else if (years_left < 9) {
		return 0.5f;
	} else if (years_left < 10) {
		return 1.0f;
	} else if (years_left < 15) {
		return 1.5f;
	} else if (years_left < 20) {
		return 1.9f;
	} else if (years_left < 25) {
		return 2.2f;
	} else {
		return 0.0f;
	}
}

float getRiskSpread(int riskIndicator) {
	switch (riskIndicator) {
		case 0:
			return 0.0f;
		case 1:
			return 0.3f;
		case 2:
			return 1.1f;
		case 3:
			return 1.9f;
		case 4:
			return 3.5f;
		case 5:
			return 100.0f;
		default:
			return 0.0f;
	}
}

void main()
{
	uint index = gl_GlobalInvocationID.x;

	// Check if index is out of bounds, this might happen if the number of records is not a multiple of the local size
	if (index >= records.length()) {
		return;
	}

	Record record = records[index];
	// i guess put all the updates and stuff below and write it right back to the buffer
	// after that we read it back out at the CPU side and then send the next invocation which can conveniently operate on the same buffer
	// maybe i can experiment with keeping the working set in high perf memory and transferring a copy out to host visiable memory so the next 'frame'
	// can run while im writing it on the cpu side

	//early exit if we have reached max date offset
	if (record.curr_date_offset >= record.max_date_offset) {
		// -1 is used as an indicator that the record is finished
		// so we can filter it out later on the cpu side
		record.index = -1;
		return;
	}

	//get a psuedo random number, we will generate it based on the input for now, could also pass it from cpu via some UBO
	//but i think this is fine for now
	float rand = fract(sin(dot(vec2(record.interest_rate, record.remaining_notional), vec2(12.9898, 78.233))) * 43758.5453); 

	record.curr_date_offset += 1;
	//migrate the risk category
	record.risk_indicator = updateRiskIndicator(record.risk_indicator, rand);

	//update the interest rate if we are at the reset date
	if (record.curr_date_offset == record.next_reset_date_offset) {
		// so this is not quite to spec as we are not calculating the implied base rate of the original loan
		// it will be a nice imporovement to store this information in some UBO and pass it in but for now i just wnat to see this shader working
		// we will do rand as the base rate, plus the matrix for duration and risk category
		float duration_spread = getDurationSpread(record.curr_date_offset, record.max_date_offset);
		float risk_spread = getRiskSpread(record.risk_indicator);
		record.interest_rate = rand + duration_spread + risk_spread;
		//recalculate the monthly annuity payment if it is annuity
		if (record.payment_type == 0) {
			float r = record.interest_rate / 12.0f / 100.0f;
			record.monthly_payment = (record.remaining_notional * r * pow(1 + r, record.max_date_offset - record.curr_date_offset))
				/ (pow(1 + r, record.max_date_offset - record.curr_date_offset) - 1);
		}
		record.next_reset_date_offset = record.max_date_offset + 1;
		record.reset_frequency = int(ceil((record.max_date_offset - record.curr_date_offset) / 12));
	}

	//calculate repay amounts
	float repayment, interest;
	switch (record.payment_type){
		//three cases
		case 0:
			//annuity
			interest = record.remaining_notional * record.interest_rate / 12.0f / 100.0f;
			repayment = record.monthly_payment - interest;
			break;
		case 1:
			// linear
			interest = record.remaining_notional * record.interest_rate / 12.0f / 100.0f;
			repayment = record.monthly_payment;
			break;
		case 2:
			// bullet
			interest = record.remaining_notional * record.interest_rate / 12.0f / 100.0f;
			repayment = 0;
			break;
	}

	// default
	if (record.risk_indicator == 5) {
		record.write_off = record.remaining_notional;
		record.remaining_notional = 0.0f;
		record.interest_payment = 0.0f;
		record.repayment_payment = 0.0f;
	} else {
		record.remaining_notional -= repayment;
		record.interest_payment = interest;
		record.repayment_payment = repayment;
		record.write_off = 0.0f;
	}
	if (record.remaining_notional < 0) {
		record.remaining_notional = 0.0f;
	}
}